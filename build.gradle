
buildscript {
    ext {
        swagger = "2.3.1"
    }

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("io.swagger:swagger-codegen:${swagger}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'

group 'jadecli'
version '0.1'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    generatedCompile
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    ext {
        commonsLang3 = "3.9"
        googleApiServicesOauth2 = "v2-rev20190313-1.30.1"
        googleClient = "1.30.3"
        googleCloudStorage = "1.92.0"
        googleOauthClientJetty = "1.30.2"
        jackson = "2.10.0"
        jersey = "2.29.1"
        junit = "4.12"
        swagger = "1.5.22"
        hamcrest = "2.1"
    }

    generatedCompile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "${jackson}"
    generatedCompile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "${jackson}"
    generatedCompile group: 'io.swagger', name: 'swagger-annotations', version: "${swagger}"
    generatedCompile 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    generatedCompile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: "${jersey}"
    generatedCompile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: "${jersey}"
    generatedCompile group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: "${jersey}"
    generatedCompile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: "${jackson}"

    compile "org.apache.commons:commons-lang3:${commonsLang3}"

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "${jackson}"
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: "${jackson}"

    compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: "${jersey}"
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: "${jersey}"
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: "${jersey}"
    compile "org.glassfish.jersey.inject:jersey-hk2:${jersey}"

    compile group: 'com.google.apis', name: 'google-api-services-oauth2', version: "${googleApiServicesOauth2}"
    compile group: 'com.google.api-client', name: 'google-api-client', version: "${googleClient}"
    compile group: 'com.google.api-client', name: 'google-api-client-java6', version: "${googleClient}"
    compile "com.google.cloud:google-cloud-storage:${googleCloudStorage}"
    compile group: 'com.google.oauth-client', name: 'google-oauth-client-jetty', version: "${googleOauthClientJetty}"

    testCompile group: 'junit', name: 'junit', version: "${junit}"
    testCompile group: 'org.hamcrest', name: 'hamcrest', version: "${hamcrest}"
}

// -- Swagger Client Generation --
import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator
def openapiSourceFile = 'src/main/resources/data-repository-openapi.yaml'
def openapiTargetFolder = 'src/generated/java'

task generateApi {
    // specify the task inputs and outputs so gradle knows what to rebuild based on what has changed
    inputs.file("$projectDir/$openapiSourceFile")
    outputs.dir("$projectDir/$openapiTargetFolder")
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec("file:///$projectDir/$openapiSourceFile")
        config.setOutputDir("$projectDir")
        config.setLang('java')
        // These properties are not well documented. The only way I've found to figure them out is to
        // locally install the swagger-codegen tool and invoke it to get the specific help for the
        // spring boot options.
        config.setAdditionalProperties([
                'interfaceOnly' : 'true',                  // only generate the model and API interfaces
                'library'       : 'jersey2',               // do jersey code generation
                'dateLibrary'   : 'java8',                 // do java8 code generation
                'apiPackage'    : 'bio.terra.datarepo.api',
                'modelPackage'  : 'bio.terra.datarepo.model',
                'invokerPackage': 'bio.terra.datarepo.client',
                'sourceFolder'  : openapiTargetFolder
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

clean.doFirst {
    delete("${projectDir}/$openapiTargetFolder")
}

// -- End of Swagger Client Generation --

sourceSets {
    generated {
        compileClasspath = configurations.generatedCompile
    }
    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    test {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
}
mainClassName = 'bio.terra.Main'

jar {
    from sourceSets.generated.output
}

compileGeneratedJava.dependsOn generateApi
classes.dependsOn generatedClasses
compileJava.dependsOn compileGeneratedJava
ideaModule.dependsOn generateApi
